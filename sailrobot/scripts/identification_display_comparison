#!/usr/bin/env python
# license removed for brevity

import sys
from python_class import utilities
import matplotlib.pyplot as plt
import rospy
import numpy as np
from math import pi
import math
import sys

import rospkg
import csv


if __name__ == '__main__':
    rospack = rospkg.RosPack()
    utilities.ReadConfig("config/config.txt")
    ident_file = rospack.get_path('sailrobot')+ '/data/identification_state.csv'
    
    simu_param = True
    if(len(sys.argv) > 1):
        simu_param = False

    xpos = [];
    ypos = [];
    rudder = [];
    sail = [];
    aaw = [];
    daw = [];
    atw = [];
    dtw = [];

    initTheta = 0
    initV = 0
    initXRef = 0
    initYRef = 0
    with open(ident_file) as csvfile:
        readCSV = csv.reader(csvfile, delimiter=',')
        next(readCSV)
        row = next(readCSV)
        # initTheta = float(row[12])
        # initV = math.sqrt(float(row[3])*float(row[3])+float(row[4])*float(row[4]))
        # initXRef = float(row[19])
        # initYRef = float(row[20])
        initTheta = float(row[4])
        initV = float(row[3])
        initXRef = float(row[0])
        initYRef = float(row[1])

    with open(ident_file) as csvfile:
        readCSV = csv.reader(csvfile, delimiter=',')
        next(readCSV)
        for row in readCSV:
            # dtw.append(float(row[13]))
            # atw.append(float(row[14]))
            # aaw.append(float(row[15]))
            # daw.append(float(row[16]))
            # rudder.append(float(row[17]))
            # sail.append(float(row[18]))
            # xpos.append(float(row[19]))
            # ypos.append(float(row[20]))
            dtw.append(float(row[5]))
            atw.append(float(row[6]))
            aaw.append(float(row[6]))
            daw.append(float(row[7]))
            rudder.append(float(row[8]))
            sail.append(float(row[9]))
            xpos.append(float(row[0]))
            ypos.append(float(row[1]))

            gpsdist = utilities.GPSDist(xpos[-1],ypos[-1],initXRef, initYRef)
            gpsbear = utilities.GPSBearing(initXRef, initYRef,xpos[-1],ypos[-1])
            xpos[-1] = gpsdist*math.cos(gpsbear)
            ypos[-1] = gpsdist*math.sin(gpsbear)
            #xpos[-1] = xpos[-1]-initXRef
            #ypos[-1] = ypos[-1]-initYRef
            #latpi = xpos[-1]*pi/180.0
            #xpos[-1] = xpos[-1]*(111132.92)
            #ypos[-1]=-ypos[-1]*(111412.84*math.cos(latpi)-93.5*math.cos(3*latpi)+0.118*math.cos(5*latpi));
    del xpos[-1]
    del ypos[-1]
    del dtw[-1]
    del daw[-1]
    del atw[-1]
    del aaw[-1]
    del rudder[-1]
    del sail[-1]
    xpossimu = []
    ypossimu = []
    states = [0,0,initTheta,initV,0]
    dt = 0.001
    p = [
        float(utilities.config["est_p1"]),
        float(utilities.config["est_p2"]),
        float(utilities.config["est_p3"]),
        float(utilities.config["est_p4"]),
        float(utilities.config["est_p5"]),
        float(utilities.config["p6"]),
        float(utilities.config["p7"]),
        float(utilities.config["p8"]),
        float(utilities.config["p9"]),
        float(utilities.config["est_p10"]),
        float(utilities.config["est_p11"])
    ]
    # p = [0.024, 34.902, 6959.404060, 179.640839, 1844.977051,float(utilities.config["p6"]), float(utilities.config["p7"]),float(utilities.config["p8"]),float(utilities.config["p9"]), 400.0, 0.17467]
    if(simu_param):
        for i in range(len(xpos)):
            sigma = math.cos(daw[i])+math.cos(sail[i]);
            delta_s = 0;
            if (sigma<0):
                delta_s = pi + daw[0];
            else:
                delta_s = -np.sign(math.sin(daw[i]))*sail[i];

            for j in range(100):
                v = states[3];
                gs = p[3]*aaw[i]*math.sin(delta_s-daw[i]);
                gr = p[4]*v*v*math.sin(rudder[i]);
                states[0] += (v*math.cos(states[2])+atw[i]*p[0]*math.cos(dtw[i]))*dt;
                states[1] += (v*math.sin(states[2])+atw[i]*p[0]*math.sin(dtw[i]))*dt;
                states[2] += states[4]*dt;
                states[3] += (gs*math.sin(delta_s)-gr*p[10]*math.sin(rudder[i])-p[1]*v*v)/p[8]*dt;
                states[4] += (gs*(p[5]-p[6]*math.cos(delta_s))-gr*p[7]*math.cos(rudder[i])-p[2]*states[4]*v)/p[9]*dt;
            xpossimu.append(states[0])
            ypossimu.append(states[1])

    plt.plot(xpos, ypos, 'r*', xpossimu, ypossimu, 'g--')
    plt.show()
